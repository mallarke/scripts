#!/usr/bin/python

import os
import xlrd

from subprocess import call

USER = os.path.expanduser("~")
ROOT = os.path.join(USER, "analytics")
ROOT_IOS = ROOT + "/ios"
ROOT_ANDROID = ROOT + "/android"

IOS_FILE = ROOT_IOS + "/AnalyticKeys.h"
ANDROID_FILE = ROOT_ANDROID + "/AnalyticKeys.java"

def getHolder(sheet):
    name = sheet.name

    if name == "views":
        return ViewHolder(sheet)

    if name == "events":
        return EventHolder(sheet)

    return None

def isValidCell(value):
    return (value is not None and len(value) > 0)

def start():
    spreadsheetName = "Record Google Analytics Event Names.xlsx"
    spreadsheet = os.path.join(ROOT, spreadsheetName)

    ssPath = os.path.join(USER, "Downloads", spreadsheetName)
    if not os.path.isfile(ssPath) and not os.path.isfile(spreadsheet):
        exit("missing a valid spread sheet.  it should be in your Downloads dir or from the calling dir.")

    if os.path.isfile(ssPath):
        call(["mv", ssPath, ROOT])

    if not os.path.isdir(ROOT):
        call(["mkdir", ROOT])

    if os.path.isdir(ROOT_IOS):
        call(["rm", "-rf", ROOT_IOS])

    if os.path.isdir(ROOT_ANDROID):
        call(["rm", "-rf", ROOT_ANDROID])

    call(["mkdir", ROOT_IOS])
    call(["mkdir", ROOT_ANDROID])

    call(["touch", IOS_FILE])
    call(["touch", ANDROID_FILE])

    with open(IOS_FILE, "w") as f:
        f.write("//  Copyright (c) 2014 Under Armour. All rights reserved.\n\n")
        f.write("/* AUTO-GENERATED VALUES */\n\n")

    with open(ANDROID_FILE, "w") as f:
        f.write("package com.ua.record.analytic;\n\n")
        f.write("//  Copyright (c) 2014 Under Armour. All rights reserved.\n\n")
        f.write("/* AUTO-GENERATED VALUES */\n\n")
        f.write("public class AnalyticKeys {\n\n")

    book = xlrd.open_workbook(spreadsheet)
    sheetLen = book.nsheets

    dimensionKeys = {}

    for i in range(0, sheetLen):
        sheet = book.sheet_by_index(i)

        holder = getHolder(sheet)
        if holder is None:
            print "unkown tab: ", sheet.name
            continue

        holder.parse()
        
        for row in holder.getRows():
            if row.hasDimensions():
                dimensionKeys.update(row.getDimensions())
    
    with open(ANDROID_FILE, "a") as f:
        if len(dimensionKeys) > 0:
            f.write("\n    public interface DimensionKeys {\n")
            
            for key in dimensionKeys:
                key = key.replace(" ", "_")
                f.write("        public String {0} = \"{1}\";\n".format(key.upper(), key))

            f.write("    }\n")

            startContent = "        "
            content = startContent

            for key, value in dimensionKeys.iteritems():
                title = ""
                components = key.split("_")

                if len(components) > 1:
                    for t in components:
                        title = title + t.capitalize()
                else:
                    title = key.capitalize()

                title = "{0}DimensionValues".format(title)

                f.write("\n    public enum {0} ".format(title))
                f.write("{\n")

                value = value.replace(", ", ",")
                components = value.split(",")

                for c in components:
                    c = c.replace(" ", "_")

                    if len(content) > 8:
                        content = content + ", "

                    if len(content) > 80:
                        content = content + "\n" + startContent

                    content = "{0}{1}(\"{2}\")".format(content, c.upper(), c)

                f.write(content + ";\n\n")
                f.write(startContent + "private String key;\n\n")
                f.write(startContent + "private {0}(String key) ".format(title))
                f.write("{\n")
                f.write(startContent + "    this.key = key;\n")
                f.write(startContent + "}\n\n")
                f.write(startContent + "public String getKey() {\n")
                f.write(startContent + "    return key;\n")
                f.write(startContent + "};\n")

                f.write("    }\n")

                content = startContent
                f.write("\n")

        f.write("}")

class KeyHolder:
    def __init__(self, sheet):
        self.sheet = sheet
        self.rows = []

    def parse(self):
        rows = self.sheet.nrows
        category = None

        for i in range(2, rows):
            row = self.getRow(i)

            if row.isValid():
                if row.getCategory() != category and isValidCell(row.getCategory()):
                    category = row.getCategory()

                row.category = category
                self.addRow(row)

        self.writeIphone()
        self.writeAndroid()

    def getRows(self):
        return self.rows

    def getRow(self, row):
        pass

    def addRow(self, row):
        for r in self.rows:
            if row.getValue() == r.getValue():
                return

        self.rows.append(row)

    def writeIphone(self):
        pass

    def writeAndroid(self):
        pass

class ViewHolder(KeyHolder):
    def __init__(self, sheet):
        KeyHolder.__init__(self, sheet)

    def getRow(self, row):
        r = Row()
        r.setKey(self.sheet.cell_value(rowx = row, colx = 0))
        r.setDescription(self.sheet.cell_value(rowx = row, colx = 3))

        return r

    def writeIphone(self):
        print "writing iOS view keys"

        with open(IOS_FILE, "a") as f:
            f.write("/******************************\n")
            f.write(" * Screen Views\n")
            f.write(" ******************************/\n\n")

            for row in self.rows:
                description = row.description

                if isValidCell(description):
                    f.write("/* {0} */\n".format(description))

                key = row.getIosKey() + "ViewKey"
                f.write("static NSString* const {0} = @\"{1}\";\n\n".format(key, row.getValue()))

    def writeAndroid(self):
        print "writing Android view keys"

        with open(ANDROID_FILE, "a") as f:
            f.write("    /******************************\n")
            f.write("     * Screen Views\n")
            f.write("     ******************************/\n\n")

            f.write("    public interface ScreenViews {\n\n")

            for row in self.rows:
                description = row.description

                if isValidCell(description):
                    f.write("        /* {0} */\n".format(description))

                f.write("        public String {0} = \"{1}\";\n\n".format(row.getAndroidKey(), row.getValue()))

            f.write("    }\n")
            
    def __str__(self):
        return "ViewHolder<{0}>: bob".format(self.name)

class EventHolder(KeyHolder):
    def __init__(self, name):
        KeyHolder.__init__(self, name)

    def getRow(self, row):
        r = Row()
        r.setCategory(self.sheet.cell_value(rowx = row, colx = 0))
        r.setKey(self.sheet.cell_value(rowx = row, colx = 1))
        r.setDescription(self.sheet.cell_value(rowx = row, colx = 6))

        key = self.sheet.cell_value(rowx = row, colx = 2)
        value = self.sheet.cell_value(rowx = row, colx = 3)

        r.put(key, value)

        return r

    def writeIphone(self):
        print "writing iOS event keys"

        with open(IOS_FILE, "a") as f:
            f.write("/******************************\n")
            f.write(" * Events\n")
            f.write(" ******************************/\n\n")

            for row in self.rows:
                description = row.description

                if isValidCell(description):
                    f.write("/* {0} */\n".format(description))

                key = row.getIosKey() + "EventKey"
                f.write("static NSString* const {0} = @\"{1}\";\n\n".format(key, row.getValue()))

    def writeAndroid(self):
        print "writing Android event keys"

        with open(ANDROID_FILE, "a") as f:
            f.write("    /******************************\n")
            f.write("     * Events\n")
            f.write("     ******************************/\n\n")

            f.write("    public interface Events {\n\n")

            for row in self.rows:
                description = row.description

                if isValidCell(description):
                    f.write("        /* {0} */\n".format(description))

                f.write("        public String {0} = \"{1}\";\n\n".format(row.getAndroidKey(), row.getValue()))

            f.write("    }\n")
        
    def __str__(self):
        return "EventHolder<{0}>: bob".format(self.name)

class Row:
    def __init__(self):
        self.category = None
        self.iosKey = None
        self.androidKey = None
        self.value = None
        self.description = None
        self.dimensions = {}

    def getCategory(self):
        return self.category

    def setCategory(self, value):
        self.category = value.capitalize()

    def getIosKey(self):
        return self.iosKey

    def getAndroidKey(self):
        return self.androidKey

    def setKey(self, value):
        value = value.replace(" ", "_")
        self.value = value

        components = value.split("_")
        v = ""

        for sequence in components:
            if len(v) > 0:
                v = v + "_"

            v = v + sequence.capitalize()

        if len(v) > 0:
            self.iosKey = "k" + v.replace("_", "")
            self.androidKey = v.upper()

    def getValue(self):
        return self.value

    def getDescription(self):
        return self.description

    def setDescription(self, value):
        self.description = value

    def hasDimensions(self):
        return (len(self.dimensions) > 0)

    def getDimensions(self):
        return self.dimensions

    def put(self, key, value):
        if isValidCell(key) and isValidCell(value):
            self.dimensions[key] = value

    def isValid(self):
        return isValidCell(self.iosKey) and isValidCell(self.androidKey)

    def __str__(self):
        value = ""
        value = self.append(value, "category", self.category)
        value = self.append(value, "iosKey", self.iosKey)
        value = self.append(value, "androidKey", self.androidKey)
        value = self.append(value, "value", self.value)
        value = self.append(value, "description", self.description)
        value = self.append(value, "dimensions", self.dimensions)

        return value

    def append(self, current, key, value):
        if isValidCell(key):
            return "{0}{1}: {2}\n".format(current, key, value)

        return current

start()
call(["cp", ANDROID_FILE, os.path.join(USER, "mmf/android/record/application/src/main/java/com/ua/record/analytic/")])
